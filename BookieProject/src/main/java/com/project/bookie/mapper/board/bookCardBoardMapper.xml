<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.project.bookie.mapper.board.BookCardBoardMapper">
	<resultMap type="bookCardBoard" id="bcb">
		<id property="id" column="id" />
		<result property="userId" column="user_id" />
		<result property="writer" column="writer" />
		<result property="content" column="content" />
		<result property="wtDate" column="w_date" />
		<result property="upDate" column="u_date" />
		<result property="likeCnt" column="like_cnt" />
	</resultMap>

	<!-- 글 전체 조회 -->
	<select id="getAllBoards" resultMap="bcb">
		select bookcard_board.id,
		user.nickname as writer, content, w_date, u_date, like_cnt
		from
		bookcard_board
		join user on bookcard_board.user_id = user.id
	</select>

	<!-- 메인화면에 표시할 최신 글 조회 -->
	<select id="getBoardListToMain" resultMap="bcb">
		select
		bookcard_board.id,
		user.nickname as writer, content, w_date, u_date,
		like_cnt
		from
		bookcard_board
		join user on bookcard_board.user_id =
		user.id
		order by id desc limit 3
	</select>

	<!-- 북카드 메인화면에 표시할 좋아요 높은 글 3개 -->
	<select id="getBoardListBest" resultMap="bcb">
		select
		bookcard_board.id, user_id, user.nickname as writer, content, w_date,
		like_cnt
		from bookcard_board join user on
		bookcard_board.user_id =
		user.id
		order by like_cnt desc limit 3;
	</select>

	<!-- 내용/작성자명으로 글 검색 -->
	<select id="getListByContentOrWriter" resultMap="bcb">
		select
		bookcard_board.id, user_id, user.nickname as writer, content, like_cnt
		from
		bookcard_board join user on bookcard_board.user_id = user.id
		where
		content like concat('%',#{query},'%')
		or
		user.nickname like
		concat('%',#{query},'%')
	</select>

	<!-- 회원이 작성한 글 목록 -->
	<select id="getListByUserId" resultMap="bcb">
		select id, user.nickname,
		content
		as writer, w_date, u_date like_cnt
		from
		bookcard_board
		where
		user_id = #{userId}
	</select>

	<!-- 글 조회 -->
	<select id="selectBoard" parameterType="String" resultMap="bcb">
		select bookcard_board.id, user_id, user.nickname as writer, content,
		w_date, like_cnt
		from bookcard_board join user on
		bookcard_board.user_id = user.id
	</select>

	<!-- 글 등록(id는 auto_incement, w_date는 기본값이 current_timestamp로 자동 생성 -->
	<insert id="insertBoard" parameterType="String">
		insert into
		bookcard_board(user_id, content, rand_id) values(#{userId},
		#{content}, FLOOR((RAND()*100000000)))
	</insert>

	<!-- 글 수정 -->
	<update id="updateBoard" parameterType="String">
		update bookcard_board set
		content=#{content}, rand_id=FLOOR((RAND()*100000000)) where id=#{id}
	</update>

	<!-- 글 삭제(글의 id 필요) -->
	<delete id="deleteBoard">
		delete from bookcard_board where id=#{id}
	</delete>

	<select id="selectLikeCnt" resultType="int">
		select like_cnt from
		bookcard_board where id=#{id}
	</select>

	<!-- 좋아요 버튼 클릭시 like_cnt = like_cnt + 1 -->
	<update id="likeCntUp">
		update bookcard_board set like_cnt=
		#{likeCnt} where
		id =#{id}
	</update>
	<!-- 좋아요 버튼 다시 클릭시 like_cnt = like_cnt - 1 -->
	<update id="likeCntDown">
		update bookcard_board set like_cnt=
		#{likeCnt} where
		id =#{id}
	</update>
	<!-- 북마크 추가 -->
	<insert id="addBookmark">
		insert into bookmark (bookcard_board_id, user_id)
		values (#{boardId},#{userId})
	</insert>
	<!-- 북마크 제거 -->
	<delete id="deleteBookmark">
		delete from bookmark where
		bookcard_board_id=#{boardId} and user_id=#{userId}
	</delete>
	<select id="selectBookmark" resultType="long">
		select bookcard_board_id from bookmark where user_id=#{userId}
	</select>

	<!-- 페이지 네이션 -->
	<!-- 한 페이지에 보여질 게시글 리스트 -->
	<!-- random -->
	<select id="getBoardListByCurrentPage" resultMap="bcb">
		select
		bookcard_board.id, user_id, user.nickname as writer, content, w_date,
		like_cnt from bookcard_board join user on bookcard_board.user_id =
		user.id
		WHERE rand_id >= FLOOR((RAND()*10000000)) order by rand_id desc
		limit #{firstRow}, #{endRow}
	</select>

	<!-- 총 게시글 수 -->
	<select id="getCountOfTotalBoard" resultType="int">
		select count(*)
		from bookcard_board
	</select>
</mapper>